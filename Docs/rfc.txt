



Tasser Team                                                     S. Ninon
Internet-Draft                                                   Epitech
Intended status: Informational                         November 14, 2014
Expires: May 18, 2015


                      R-Type Network Game Protocol
                               R-Type RFC

Abstract

   This memo presents the Network Game Protocol used for the R-Type.

Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 18, 2015.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of



Ninon                     Expires May 18, 2015                  [Page 1]

Internet-Draft        R-Type Network Game Protocol         November 2014


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Transfert Description . . . . . . . . . . . . . . . . . . . .   4
     2.1.  TCP . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  UDP . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Data Unit Dormat  . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Header  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.2.  Body  . . . . . . . . . . . . . . . . . . . . . . . . . .   5
   4.  TCP Commands  . . . . . . . . . . . . . . . . . . . . . . . .   5
     4.1.  handshake . . . . . . . . . . . . . . . . . . . . . . . .   5
       4.1.1.  From Client . . . . . . . . . . . . . . . . . . . . .   5
       4.1.2.  From Server . . . . . . . . . . . . . . . . . . . . .   5
     4.2.  createGame  . . . . . . . . . . . . . . . . . . . . . . .   6
       4.2.1.  From Client . . . . . . . . . . . . . . . . . . . . .   6
       4.2.2.  From Server . . . . . . . . . . . . . . . . . . . . .   6
     4.3.  joinGame  . . . . . . . . . . . . . . . . . . . . . . . .   6
       4.3.1.  From Client . . . . . . . . . . . . . . . . . . . . .   6
       4.3.2.  From Server . . . . . . . . . . . . . . . . . . . . .   7
     4.4.  observeGame . . . . . . . . . . . . . . . . . . . . . . .   7
       4.4.1.  From Client . . . . . . . . . . . . . . . . . . . . .   7
       4.4.2.  From Server . . . . . . . . . . . . . . . . . . . . .   8
     4.5.  showGame  . . . . . . . . . . . . . . . . . . . . . . . .   8
       4.5.1.  From Client . . . . . . . . . . . . . . . . . . . . .   8
       4.5.2.  From Server . . . . . . . . . . . . . . . . . . . . .   8
     4.6.  leaveGame . . . . . . . . . . . . . . . . . . . . . . . .   9
       4.6.1.  From Client . . . . . . . . . . . . . . . . . . . . .   9
       4.6.2.  From Server . . . . . . . . . . . . . . . . . . . . .   9
     4.7.  deleteGame  . . . . . . . . . . . . . . . . . . . . . . .   9
       4.7.1.  From Client . . . . . . . . . . . . . . . . . . . . .   9
       4.7.2.  From Server . . . . . . . . . . . . . . . . . . . . .  10
     4.8.  listGames . . . . . . . . . . . . . . . . . . . . . . . .  10
       4.8.1.  From Client . . . . . . . . . . . . . . . . . . . . .  10
       4.8.2.  From Server . . . . . . . . . . . . . . . . . . . . .  10
     4.9.  listLevels  . . . . . . . . . . . . . . . . . . . . . . .  10
       4.9.1.  From Client . . . . . . . . . . . . . . . . . . . . .  10
       4.9.2.  From Server . . . . . . . . . . . . . . . . . . . . .  11
     4.10. updatePseudo  . . . . . . . . . . . . . . . . . . . . . .  11
       4.10.1.  From Client  . . . . . . . . . . . . . . . . . . . .  11
       4.10.2.  From Server  . . . . . . . . . . . . . . . . . . . .  11
     4.11. disconnect  . . . . . . . . . . . . . . . . . . . . . . .  11
       4.11.1.  From Client  . . . . . . . . . . . . . . . . . . . .  11
       4.11.2.  From Server  . . . . . . . . . . . . . . . . . . . .  12
     4.12. error . . . . . . . . . . . . . . . . . . . . . . . . . .  12
       4.12.1.  From Client  . . . . . . . . . . . . . . . . . . . .  12



Ninon                     Expires May 18, 2015                  [Page 2]

Internet-Draft        R-Type Network Game Protocol         November 2014


       4.12.2.  From Server  . . . . . . . . . . . . . . . . . . . .  12
     4.13. endGame . . . . . . . . . . . . . . . . . . . . . . . . .  12
       4.13.1.  From Client  . . . . . . . . . . . . . . . . . . . .  12
       4.13.2.  From Server  . . . . . . . . . . . . . . . . . . . .  12
     4.14. showLevel . . . . . . . . . . . . . . . . . . . . . . . .  13
       4.14.1.  From Client  . . . . . . . . . . . . . . . . . . . .  13
       4.14.2.  From Server  . . . . . . . . . . . . . . . . . . . .  13
   5.  UDP Commands  . . . . . . . . . . . . . . . . . . . . . . . .  14
     5.1.  move  . . . . . . . . . . . . . . . . . . . . . . . . . .  14
       5.1.1.  From Client . . . . . . . . . . . . . . . . . . . . .  14
       5.1.2.  From Server . . . . . . . . . . . . . . . . . . . . .  14
     5.2.  fire  . . . . . . . . . . . . . . . . . . . . . . . . . .  14
       5.2.1.  From Client . . . . . . . . . . . . . . . . . . . . .  14
       5.2.2.  From Server . . . . . . . . . . . . . . . . . . . . .  14
     5.3.  moveResource  . . . . . . . . . . . . . . . . . . . . . .  15
       5.3.1.  From Client . . . . . . . . . . . . . . . . . . . . .  15
       5.3.2.  From Server . . . . . . . . . . . . . . . . . . . . .  15
     5.4.  destroyResource . . . . . . . . . . . . . . . . . . . . .  15
       5.4.1.  From Client . . . . . . . . . . . . . . . . . . . . .  15
       5.4.2.  From Server . . . . . . . . . . . . . . . . . . . . .  15
     5.5.  updateScore . . . . . . . . . . . . . . . . . . . . . . .  16
       5.5.1.  From Client . . . . . . . . . . . . . . . . . . . . .  16
       5.5.2.  From Server . . . . . . . . . . . . . . . . . . . . .  16
     5.6.  timeElapsedPing . . . . . . . . . . . . . . . . . . . . .  17
       5.6.1.  From Client . . . . . . . . . . . . . . . . . . . . .  17
       5.6.2.  From Server . . . . . . . . . . . . . . . . . . . . .  17
   6.  Annex . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17
     6.1.  Instruction Code  . . . . . . . . . . . . . . . . . . . .  17
     6.2.  Error Code  . . . . . . . . . . . . . . . . . . . . . . .  18
     6.3.  enum Direction  . . . . . . . . . . . . . . . . . . . . .  18
     6.4.  enum ResourceType . . . . . . . . . . . . . . . . . . . .  18
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  19
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  19

1.  Introduction

   This document provides a full documentation for the Network Game
   Protocol of the R-Type Game.

   It provides all the necessary information to understand how to
   communicate with a R-Type server and with a R-Type client: commands,
   protocols, packets format...

   It also explains when to use the TCP and the UDP network protocols
   when you are communicating with a R-Type client or with a R-Type
   server.





Ninon                     Expires May 18, 2015                  [Page 3]

Internet-Draft        R-Type Network Game Protocol         November 2014


2.  Transfert Description

   The R-Type Network Communication Protocol is based on the TCP and UDP
   network protocols.

   The R-Type Network Communication is a binary protocol.

2.1.  TCP

   The TCP protocol is used for all the commands that are not related to
   a game action.

   Basically, all the commands that are related to the client's menu
   (list games, create game, delete game, ...) must be sent by using the
   TCP network protocol.

   This protocol has been chosen to provide a safe client-server
   communication for important commands

2.2.  UDP

   The UDP protocol is used for all the commands that are related to a
   game action.

   Basically, all movements informations are transmitted by using the
   UDP network protocol.

   This protocol has been chosen to provide a fast and efficient client-
   server communication

3.  Data Unit Dormat

   Each command is formatted by using the following diagram: a common
   header and a specific body.

   This configuration must be implemented by both TCP and UDP
   communication.

   |-------------------------|
   | HEADER |      BODY      |
   |-------------------------|

3.1.  Header

   The header is composed of a magic_code and of an instruction code.

   |-------------------------------|
   | magic_code | instruction_code |



Ninon                     Expires May 18, 2015                  [Page 4]

Internet-Draft        R-Type Network Game Protocol         November 2014


   |   int32_t  |      int32_t     |
   |-------------------------------|

   The magic_code must have a value of 0x150407CA.  If it doesn't, the
   packet must be considered as invalid and the connection must be
   closed.

   The instruction_code corresponds to a specific value depending of the
   command.  It must be used to know what is the size of the packet's
   body.

3.2.  Body

   The packet's body contains a c-structure data which depends of the
   command that has been sent.

   Each command has its own structure with a different size and
   different fields.

4.  TCP Commands

4.1.  handshake

   Instruction code: 0x0A

4.1.1.  From Client

   This command must be sent just after beeing connecting to the R-Type
   server.

   It informs the server that you are a valid R-Type client.

   Until you send this command, the other commands you'll send may not
   be treated by the server.

   This command does not have a body.

4.1.2.  From Server

   This command must be sent just after accepting a R-Type client.

   It informs the client that you are a valid R-Type server.

   Until you send this command, the other commands you'll send may not
   be treated by the client.

   This command does not have a body.




Ninon                     Expires May 18, 2015                  [Page 5]

Internet-Draft        R-Type Network Game Protocol         November 2014


4.2.  createGame

   Instruction code: 0x01

4.2.1.  From Client

   This command is used to create a new game on the server.

   This command is composed of the following body:

   |-------------------------------------------------|
   |   name   | levelName | nbPlayers | nbSpectators |
   | char[64] |  char[64] |   char    |     char     |
   |-------------------------------------------------|

   The name attribute is the name you want to give to the created game.

   The levelName attribute is the name of the level script you want to
   use.

   The nbPlayers attribute is the maximum number of players who can play
   to the created game.  This number must be between 1 and 4.

   The nbSpectators attribute is the maximum number of spectators who
   can attend to the created game.  This number must be between 1 and 4.

   The server must answer with an error command packet.

   In case of success, the client becomes the owner of the game and can
   delete it.

   The ownership can not be given to an other client.

4.2.2.  From Server

   This command has no equivalent server-side.

4.3.  joinGame

   Instruction code: 0x02

4.3.1.  From Client

   This command is used to join a game as an active player.

   This command is composed of the following body:





Ninon                     Expires May 18, 2015                  [Page 6]

Internet-Draft        R-Type Network Game Protocol         November 2014


   |----------|
   |   name   |
   | char[64] |
   |----------|

   The name attribute is the name of the game you want to join.

   The server must answer with an error command.

   In case of success, the client joins the game and the server must
   send informations concerning players positions, bullets positions,
   current script execution time...

   In case of success, the client can send UDP packets which stand for
   client actions (eg: move, fire).

   In case of success, the server must notify the already connected
   players that a new client has joined.

4.3.2.  From Server

   This command has no equivalent server-side.

4.4.  observeGame

   Instruction code: 0x0E

4.4.1.  From Client

   This command is used to join a game as an observer.

   This command is composed of the following body:

   |----------|
   |   name   |
   | char[64] |
   |----------|

   The name attribute is the name of the game you want to join.

   The server must answer with an error command.

   In case of success, the client joins the game and the server must
   send informations concerning players positions, bullets positions,
   current script execution time...

   In case of success, the client can not send UDP packets which stand
   for client actions (eg: move, fire).



Ninon                     Expires May 18, 2015                  [Page 7]

Internet-Draft        R-Type Network Game Protocol         November 2014


4.4.2.  From Server

   This command has no equivalent server-side.

4.5.  showGame

   Instruction code: 0x03

4.5.1.  From Client

   This command is used to ask for game informations.

   This command is composed of the following body:

   |----------|
   |   name   |
   | char[64] |
   |----------|

   The name attribute is the name of the game which you want
   information.

   The server must answer with an error command.

   In case of success, the server must send a showGame command.

4.5.2.  From Server

   This command is used to send game information to a client.

   This command is composed of the following body:

   |----------------------------------------------------------------|
   |   name |levelName|nbPlayers|maxPlayers|nbObservers|maxObservers|
   |char[64]| char[64]|   char  |   char   |    char   |    char    |
   |----------------------------------------------------------------|

   The name attribute is the name of the game concerned by the
   information.

   The levelName attribute is the name of the level script used in the
   game.

   The nbPlayers attribute is the number of clients that are currently
   playing on the game.

   The maxPlayers attribute is the maximum number of clients that can
   play on this game.



Ninon                     Expires May 18, 2015                  [Page 8]

Internet-Draft        R-Type Network Game Protocol         November 2014


   The nbObservers attribute is the number of clients that are currently
   observing the game.

   The maxObservers attribute is the maximum number of clients that can
   observe the game.

4.6.  leaveGame

   Instruction code: 0x0F

4.6.1.  From Client

   This command is used to leave a game.

   This command is composed of the following body:

   |----------|
   |   name   |
   | char[64] |
   |----------|

   The name attribute is the name of the game you want to leave.

   The server must answer with an error command.

   In case of success, the client leaves the game.

   In case of success, the client can not send UDP packets which stand
   for game actions any more.

   In case of success, the server must not send UDP packets which stand
   for game actions any more.

   In case of success, the server must notify the other players that a
   client has left.

4.6.2.  From Server

   This command has no equivalent server-side.

4.7.  deleteGame

   Instruction code: 0x04

4.7.1.  From Client

   This command is used to delete a game.




Ninon                     Expires May 18, 2015                  [Page 9]

Internet-Draft        R-Type Network Game Protocol         November 2014


   This command can only succeed if you are the owner of the game.

   This command is composed of the following body:

   |----------|
   |   name   |
   | char[64] |
   |----------|

   The name attribute is the name of the game you want to delete.

   The server must answer with an error command.

   In case of success, the game is deleted.

   In case of success, all the players and observers must be forced to
   leave the game and must be notified by the server.

4.7.2.  From Server

   This command has no equivalent server-side.

4.8.  listGames

   Instruction code: 0x05

4.8.1.  From Client

   This command is used to list all the games.

   This command is composed of an empty body.

   The server may answer with a loop of showGame commands.

4.8.2.  From Server

   This command has no equivalent server-side.

4.9.  listLevels

   Instruction code: 0x10

4.9.1.  From Client

   This command is used to list all the levels.

   This command is composed of an empty body.




Ninon                     Expires May 18, 2015                 [Page 10]

Internet-Draft        R-Type Network Game Protocol         November 2014


   The server may answer with a loop of showLevel commands.

4.9.2.  From Server

   This command has no equivalent server-side.

4.10.  updatePseudo

   Instruction code: 0x06

4.10.1.  From Client

   This command is used to update the client's pseudo.

   This command is composed of the following body:

   |----------|
   |  pseudo  |
   | char[64] |
   |----------|

   The pseudo attribute is the pseudo you want to use.

   The server must answer with an error command.

   In case of success, the pseudo is updated.

4.10.2.  From Server

   This command has no equivalent server-side.

4.11.  disconnect

   Instruction code: 0x07

4.11.1.  From Client

   This command is used to close the connection with the server.

   This command is composed of an empty body.

   The server must handle the disconnection and close the connection.









Ninon                     Expires May 18, 2015                 [Page 11]

Internet-Draft        R-Type Network Game Protocol         November 2014


4.11.2.  From Server

   This command has no equivalent server-side.

4.12.  error

   Instruction code: 0x00

4.12.1.  From Client

   This command has no equivalent client-side.

4.12.2.  From Server

   This command is used to notify a client if an error occured during
   the last received command treatment.

   This command is composed of the following body:

   |-----------------------------|
   | instructionCode | errorCode |
   |     int32_t     |  int32_t  |
   |-----------------------------|

   The instructionCode attribute is the code of the instruction
   concerned by the error packet.

   The errorCode attribute is an error code corresponding to the state
   of the instruction excecution.

   The errorCode must have one of the following values:

   o  OK: 0x00

   o  KO: 0x01

4.13.  endGame

   Instruction code: 0x0B

4.13.1.  From Client

   This command has no equivalent server-side.

4.13.2.  From Server

   This command is used to notify a client that the game has ended.




Ninon                     Expires May 18, 2015                 [Page 12]

Internet-Draft        R-Type Network Game Protocol         November 2014


   This command may be sent in different context: the game has been
   deleted, the player has been killed or the game has ended.

   This command is composed of the following body:

   |----------|
   |   game   |
   | char[64] |
   |----------|

   The game attribute is name of the concerned game.

   After sending this command, the server must not send UDP packets
   which stand for game actions anymore.

   After receiving this command, the client can not send UDP packets
   which stand for game actions anymore.

4.14.  showLevel

   Instruction code: 0x11

4.14.1.  From Client

   This command has no equivalent server-side.

4.14.2.  From Server

   This command is used to send level script information to a client.

   This command is composed of the following body:

   |-------------------------------------|
   | levelName | scriptSize |   script   |
   |  char[64] |   int32_t  | char[4096] |
   |-------------------------------------|

   The levelName attribute is the name of the level script.

   The scriptSize attribute is the size, in bytes, of the script
   contained by the script attribute.

   The script attribute contains the level script data.

   The server must send a showLevel command for all the available levels
   to a new client.





Ninon                     Expires May 18, 2015                 [Page 13]

Internet-Draft        R-Type Network Game Protocol         November 2014


5.  UDP Commands

5.1.  move

   Instruction code: 0x08

5.1.1.  From Client

   This command is used to notify the server that the player want to
   move in the given direction.

   This command is composed of the following body:

   |-----------|
   | direction |
   |    char   |
   |-----------|

   The direction attribute is direction the player want to take.  It
   must be one of the following value:

   o  LEFT: 0x00

   o  RIGHT: 0x01

   o  TOP: 0x02

   o  BOTTOM: 0x03

5.1.2.  From Server

   This command has no equivalent server-side.

5.2.  fire

   Instruction code: 0x09

5.2.1.  From Client

   This command is used to notify the server that the player want to
   fire a bullet.

   This command is composed of an empty body.

5.2.2.  From Server

   This command has no equivalent server-side.




Ninon                     Expires May 18, 2015                 [Page 14]

Internet-Draft        R-Type Network Game Protocol         November 2014


5.3.  moveResource

   Instruction code: 0x0C

5.3.1.  From Client

   This command has no equivalent client-side.

5.3.2.  From Server

   This command is used to notify a client that a resource has moved.

   This command is composed of the following body:

   |----------------------------------------|
   |    id   | type |   x   |   y   | angle |
   | int32_t | char | float | float | short |
   |----------------------------------------|

   The id attribute is the id of the element.  Each element has a unique
   id.

   The type attribute is the type of the resource.  The type must have
   one of the following value:

   o  PLAYER: 0x00

   o  BULLER: 0x01

   o  ENNEMY: 0x02

   o  BONUS: 0x03

   The x and y attributes give the new position of the resource on the
   map.

   The angle attribute correspond to the direction of the resource.

5.4.  destroyResource

   Instruction code: 0x0D

5.4.1.  From Client

   This command has no equivalent client-side.

5.4.2.  From Server




Ninon                     Expires May 18, 2015                 [Page 15]

Internet-Draft        R-Type Network Game Protocol         November 2014


   This command is used to notify a client that a resource has been
   destroyed.

   This command is composed of the following body:

   |----------------|
   |    id   | type |
   | int32_t | char |
   |----------------|

   The id attribute is the unique id of the destroyed resource.

   The type is the type of the destroyed resource.  It must have one of
   the following values:

   o  PLAYER: 0x00

   o  BULLER: 0x01

   o  ENNEMY: 0x02

   o  BONUS: 0x03

   Once the resource has been destroyed, its unique id may be reused for
   a newly created resource.

5.5.  updateScore

   Instruction code: 0x12

5.5.1.  From Client

   This command has no equivalent client-side.

5.5.2.  From Server

   This command is used to notify a client about the score of a player.

   This command is composed of the following body:

   |------------------------------|
   |    id   |  pseudo  |  score  |
   | int32_t | char[64] | int32_t |
   |------------------------------|

   The id attribute is the id of the concerned player.

   The pseudo attribute is the pseudo of the concerned player.



Ninon                     Expires May 18, 2015                 [Page 16]

Internet-Draft        R-Type Network Game Protocol         November 2014


   The score attribute is the score of the concerned player.

5.6.  timeElapsedPing

   Instruction code: 0x13

5.6.1.  From Client

   This command has no equivalent client-side.

5.6.2.  From Server

   This command is used to notify a client about the current execution
   time of the script.

   This command is composed of the following body:

   |-------------|
   | timeElapsed |
   |   int64_t   |
   |-------------|

   The timeElapsed attribute is the time elapsed since the beginning of
   the game.

   Even if the client must implement its own game loop, this command
   must be used by the client to adjust its intern game timer.

6.  Annex

6.1.  Instruction Code

   o  error: 0x00

   o  createGame: 0x01

   o  joinGame: 0x02

   o  showGame: 0x03

   o  deleteGame: 0x04

   o  listGames: 0x05

   o  updatePseudo: 0x06

   o  disconnect: 0x07




Ninon                     Expires May 18, 2015                 [Page 17]

Internet-Draft        R-Type Network Game Protocol         November 2014


   o  move: 0x08

   o  fire: 0x09

   o  handshake: 0x0A

   o  endGame: 0x0B

   o  moveResource: 0x0C

   o  destroyResource: 0x0D

   o  observeGame: 0x0E

   o  leaveGame: 0x0F

   o  listLevels: 0x10

   o  showLevel: 0x11

   o  updateScore: 0x12

   o  pingTimeElapsed: 0x13

6.2.  Error Code

   o  OK: 0x00

   o  KO: 0x01

6.3.  enum Direction

   o  LEFT: 0x00

   o  RIGHT: 0x01

   o  TOP: 0x02

   o  BOTTOM: 0x03

6.4.  enum ResourceType

   o  PLAYER: 0x00

   o  BULLER: 0x01

   o  ENNEMY: 0x02




Ninon                     Expires May 18, 2015                 [Page 18]

Internet-Draft        R-Type Network Game Protocol         November 2014


   o  BONUS: 0x03

7.  References

   [RFC2629]  Rose, M., "Writing I-Ds and RFCs using XML", RFC 2629,
              June 1999.

Author's Address

   Simon Ninon
   Epitech








































Ninon                     Expires May 18, 2015                 [Page 19]
